### NAV2 config file ###
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: True
      width: 3
      height: 3
      resolution: 0.05
      footprint: "[ [0.3075, 0.290], [-0.3075, 0.290], [0.3075, -0.290], [-0.3075, -0.290] ]" # set on the size of the Scout Mini 615x580mm
      # plugins: ["static_layer", "obstacle_layer", "voxel_layer", "inflation_layer"]
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      # plugins: ["inflation_layer", "obstacle_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 1.0
        cost_scaling_factor: 3.0
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /namespace/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True
      # static_layer:
      #   plugin: "nav2_costmap_2d::StaticLayer"
      #   footprint_clearing_enabled: True
      #   map_subscribe_transient_local: True
      # obstacle_layer:
      #   plugin: "nav2_costmap_2d::ObstacleLayer"
      #   enabled: True
      #   observation_sources: scan
      #   scan:
      #     topic: /scan
      #     max_obstacle_height: 2.0
      #     clearing: True
      #     marking: True
      #     data_type: "LaserScan"
      #     obstacle_max_range: 2.5
      #     obstacle_min_range: 0.0
      #     raytrace_max_range: 3.0
      #     raytrace_min_range: 0.0
      # inflation_layer:
      #   plugin: "nav2_costmap_2d::InflationLayer"
      #   inflation_radius: 0.15
      #   cost_scaling_factor: 3.0
      # always_send_full_costmap: True

  local_costmap_client:
    ros__parameters:
      use_sim_time: True

  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True
      footprint: "[ [0.3075, 0.290], [-0.3075, 0.290], [0.3075, -0.290], [-0.3075, -0.290] ]" # set on the size of the Scout Mini 615x580mm
      resolution: 0.05
      track_unknown_space: True
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        footprint_clearing_enabled: True
        map_subscribe_transient_local: True
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /namespace/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 1.0
        cost_scaling_factor: 3.0
      always_send_full_costmap: True

  global_costmap_client:
    ros__parameters:
      use_sim_time: True

  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      ### NavFN
      plugin: "nav2_navfn_planner/NavfnPlanner" # In Iron and older versions, "/" was used instead of "::"
      use_astar: True
      allow_unknown: True
      tolerance: 0.5
      ### SMAC - Hybrid
      # plugin: "nav2_smac_planner/SmacPlannerHybrid"
      # tolerance: 0.5 # tolerance for planning if unable to reach exact pose, in meters
      # downsample_costmap: false # whether or not to downsample the map
      # downsampling_factor: 1 # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      # allow_unknown: false # allow traveling in unknown space
      # max_iterations: 1000000 # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      # max_on_approach_iterations: 1000 # maximum number of iterations to attempt to reach goal once in tolerance
      # terminal_checking_interval: 5000 # number of iterations between checking if the goal has been cancelled or planner timed out
      # max_planning_time: 3.5 # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      # motion_model_for_search: "REEDS_SHEPP" # DUBIN or REEDS_SHEPP (Dubin with reverse)
      # cost_travel_multiplier: 2.0 # cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*
      # angle_quantization_bins: 72 # number of angle bins for search, must be 1 for 2D node (no angle search)
      # analytic_expansion_ratio: 3.5 # the ratio to attempt analytic expansions during search for final approach
      # analytic_expansion_max_length: 3.0 # the maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
      # analytic_expansion_max_cost: true # the maximum single cost for any part of an analytic expansion to contain and be valid (except when necessary on approach to goal)
      # analytic_expansion_max_cost_override: false # whether or not to override the maximum cost setting if within critical distance to goal (i.e. probably required)
      # minimum_turning_radius: 0.4 # minimum turning radius in m of path / vehicle
      # reverse_penalty: 1.3 # penalty to apply if motion is reversing, must be => 1 (for Reeds-Shepp)
      # change_penalty: 0.0 # penalty to apply if motion is changing directions, must be >= 0
      # non_straight_penalty: 1.3 # penalty to apply if motion is non-straight, must be => 1
      # cost_penalty: 2.0 # penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      # retrospective_penalty: 0.025 # penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0
      # lookup_table_size: 20.0 # size of the dubin/reeds-sheep distance window to cache, in meters
      # cache_obstacle_heuristic: true # cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static
      # smooth_path: true # whether or not to smooth the path, always true for 2D nodes
      # debug_visualizations: true # whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.
      # smoother:
      #   max_iterations: 1000
      #   w_smooth: 0.3
      #   w_data: 0.2
      #   tolerance: 1.0e-10
      #   do_refinement: true # Whether to recursively run the smoother 3 times on the results from prior runs to refine the results further
      ### SmacPlanne-2D
      # plugin: "nav2_smac_planner/SmacPlanner2D" # In Iron and older versions, "/" was used instead of "::"
      # tolerance: 0.25 # tolerance for planning if unable to reach exact pose, in meters
      # downsample_costmap: false # whether or not to downsample the map
      # downsampling_factor: 1 # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      # allow_unknown: true # allow traveling in unknown space
      # max_iterations: 1000000 # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      # max_on_approach_iterations: 1000 # maximum number of iterations to attempt to reach goal once in tolerance
      # max_planning_time: 2.0 # max time in s for planner to plan, smooth
      # cost_travel_multiplier: 2.0 # Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      # use_final_approach_orientation: false # Whether to set the final path pose at the goal's orientation to the requested orientation (false) or in line with the approach angle so the robot doesn't rotate to heading (true)
      # smoother:
      #   max_iterations: 1000
      #   w_smooth: 0.3
      #   w_data: 0.2
      #   tolerance: 1.0e-10
      #   do_refinement: true # Whether to recursively run the smoother 3 times on the results from prior runs to refine the results further

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

controller_server:
  ros__parameters:
    ### DWB Controller params
    # use_sim_time: True
    # controller_frequency: 20.0
    # min_x_velocity_threshold: 0.001
    # min_y_velocity_threshold: 0.5
    # min_theta_velocity_threshold: 0.001
    # failure_tolerance: 0.3
    # odom_topic: /namespace/odom
    # progress_checker_plugins: "progress_checker" # progress_checker_plugin: "progress_checker" For Humble and older
    # goal_checker_plugin: ["goal_checker"]
    # controller_plugins: ["FollowPath"]
    # progress_checker:
    #   plugin: "nav2_controller::SimpleProgressChecker"
    #   required_movement_radius: 0.5
    #   movement_time_allowance: 10.0
    # goal_checker:
    #   plugin: "nav2_controller::SimpleGoalChecker"
    #   xy_goal_tolerance: 0.25
    #   yaw_goal_tolerance: 0.25
    #   stateful: True
    # FollowPath:
    #   plugin: "dwb_core::DWBLocalPlanner"
    #   debug_trajectory_details: True
    #   min_vel_x: 0.0
    #   min_vel_y: 0.0
    #   max_vel_x: 1.5
    #   max_vel_y: 0.0
    #   max_vel_theta: 1.0
    #   min_speed_xy: 0.0
    #   max_speed_xy: 1.5 # 2.77 this is set for Scout Mini (max speed 10km/h)
    #   min_speed_theta: 0.0
    #   Add high threshold velocity for turtlebot 3 issue.
    #   https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
    #   TODO: I don't know what to set for this 6 parameters, which is the maximum accelaratin for the robot?
    #   acc_lim_x: 1.0
    #   acc_lim_y: 0.0
    #   acc_lim_theta: 1.0
    #   decel_lim_x: -1.0
    #   decel_lim_y: 0.0
    #   decel_lim_theta: -1.0
    #   vx_samples: 20
    #   vy_samples: 5
    #   vtheta_samples: 20
    #   sim_time: 1.7
    #   linear_granularity: 0.05
    #   angular_granularity: 0.025
    #   transform_tolerance: 0.2
    #   xy_goal_tolerance: 0.25
    #   trans_stopped_velocity: 0.25
    #   short_circuit_trajectory_evaluation: True
    #   stateful: True
    #   critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
    #   BaseObstacle.scale: 0.02
    #   PathAlign.scale: 32.0
    #   PathAlign.forward_point_distance: 0.1
    #   GoalAlign.scale: 24.0
    #   GoalAlign.forward_point_distance: 0.1
    #   PathDist.scale: 32.0
    #   GoalDist.scale: 24.0
    #   RotateToGoal.scale: 32.0
    #   RotateToGoal.slowing_factor: 5.0
    #   RotateToGoal.lookahead_time: -1.0
    ### MPPI controller params
    controller_frequency: 20.0
    use_sim_time: True
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 56
      model_dt: 0.05
      batch_size: 2000
      vx_std: 0.2
      vy_std: 0.2
      wz_std: 0.4
      vx_max: 0.5
      vx_min: -0.5
      vy_max: 0.5
      wz_max: 1.9
      iteration_count: 1
      prune_distance: 1.7
      transform_tolerance: 0.1
      temperature: 0.3 # MD: how many trajectory consider base on the cost, close to 0 just the ones with lower values.
      gamma: 0.015
      motion_model: "DiffDrive"
      visualize: false
      reset_period: 1.0 # (only in Humble)
      regenerate_noises: false
      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3
      # AckermannConstraints:
      #   min_turning_r: 0.2
      # critics: ["ConstraintCritic", "CostCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic", "ObstaclesCritic"]
      critics:
        [
          "ConstraintCritic",
          "GoalCritic",
          "GoalAngleCritic",
          "PathAlignCritic",
          "PathFollowCritic",
          "PathAngleCritic",
          "PreferForwardCritic",
          "ObstaclesCritic",
        ]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 1.4
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.5
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.5
      ObstaclesCritic:
        enabled: true
        cost_power: 1
        repulsion_weight: 1.5
        critical_weight: 20.0
        consider_footprint: true
        collision_cost: 100000.0
        collision_margin_distance: 0.1 # MD: This is to tweak also in base to the narrow place where you want to go.
        near_goal_distance: 0.5
        inflation_radius: 1.0 # (only in Humble)
        cost_scaling_factor: 3.0 # (only in Humble)
      # CostCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 3.81
      #   critical_cost: 300.0
      #   consider_footprint: true
      #   collision_cost: 1000000.0
      #   near_goal_distance: 1.0
      #   trajectory_point_step: 6 # MD: added by me. 
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 14.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 6
        threshold_to_consider: 0.5
        offset_from_furthest: 18
        use_path_orientations: false
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 6
        threshold_to_consider: 1.4
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 20
        threshold_to_consider: 0.5
        max_angle_to_furthest: 0.785398
        mode: 0 # TODO: MD if we move to SmacPlanner maybe try also value 2: https://docs.nav2.org/configuration/packages/configuring-mppic.html#path-angle-critic
      # TwirlingCritic:
      #   enabled: true
      #   twirling_cost_power: 1
      #   twirling_cost_weight: 10.0
    ### Pure purseit controller params
    # use_sim_time: True
    # controller_frequency: 20.0
    # min_x_velocity_threshold: 0.001
    # min_y_velocity_threshold: 0.5
    # min_theta_velocity_threshold: 0.001
    # progress_checker_plugins: "progress_checker" # progress_checker_plugin: "progress_checker" For Humble and older
    # goal_checker_plugins: ["goal_checker"]
    # controller_plugins: ["FollowPath"]
    # progress_checker:
    #   plugin: "nav2_controller::SimpleProgressChecker"
    #   required_movement_radius: 0.5
    #   movement_time_allowance: 10.0
    # goal_checker:
    #   plugin: "nav2_controller::SimpleGoalChecker"
    #   xy_goal_tolerance: 0.25
    #   yaw_goal_tolerance: 0.25
    #   stateful: True
    # FollowPath:
    #   plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
    #   desired_linear_vel: 0.5
    #   lookahead_dist: 1.0
    #   min_lookahead_dist: 0.5
    #   max_lookahead_dist: 3.0
    #   lookahead_time: 10.0
    #   rotate_to_heading_angular_vel: 0.5
    #   transform_tolerance: 0.1
    #   use_velocity_scaled_lookahead_dist: false
    #   min_approach_linear_velocity: 0.05
    #   approach_velocity_scaling_dist: 0.75
    #   use_collision_detection: true
    #   max_allowed_time_to_collision_up_to_carrot: 3.0
    #   use_regulated_linear_velocity_scaling: true
    #   use_fixed_curvature_lookahead: false
    #   curvature_lookahead_dist: 1.0
    #   use_cost_regulated_linear_velocity_scaling: false
    #   regulated_linear_scaling_min_radius: 0.3
    #   regulated_linear_scaling_min_speed: 0.25
    #   use_rotate_to_heading: true
    #   allow_reversing: false
    #   rotate_to_heading_min_angle: 0.785
    #   max_angular_accel: 0.5
    #   max_robot_pose_search_dist: 10.0

bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /namespace/odom
    bt_loop_duration: 10
    default_server_timeout: 20
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node


    # - nav2_compute_path_to_pose_action_bt_node
    # - nav2_compute_path_through_poses_action_bt_node
    # - nav2_smooth_path_action_bt_node
    # - nav2_follow_path_action_bt_node
    # - nav2_spin_action_bt_node
    # - nav2_wait_action_bt_node
    # - nav2_assisted_teleop_action_bt_node
    # - nav2_back_up_action_bt_node
    # - nav2_drive_on_heading_bt_node
    # - nav2_clear_costmap_service_bt_node
    # - nav2_is_stuck_condition_bt_node
    # - nav2_goal_reached_condition_bt_node
    # - nav2_goal_updated_condition_bt_node
    # - nav2_globally_updated_goal_condition_bt_node
    # - nav2_is_path_valid_condition_bt_node
    # - nav2_initial_pose_received_condition_bt_node
    # - nav2_reinitialize_global_localization_service_bt_node
    # - nav2_rate_controller_bt_node
    # - nav2_distance_controller_bt_node
    # - nav2_speed_controller_bt_node
    # - nav2_truncate_path_action_bt_node
    # - nav2_truncate_path_local_action_bt_node
    # - nav2_goal_updater_node_bt_node
    # - nav2_recovery_node_bt_node
    # - nav2_pipeline_sequence_bt_node
    # - nav2_round_robin_node_bt_node
    # - nav2_transform_available_condition_bt_node
    # - nav2_time_expired_condition_bt_node
    # - nav2_path_expiring_timer_condition
    # - nav2_distance_traveled_condition_bt_node
    # - nav2_single_trigger_bt_node
    # - nav2_goal_updated_controller_bt_node
    # - nav2_is_battery_low_condition_bt_node
    # - nav2_navigate_through_poses_action_bt_node
    # - nav2_navigate_to_pose_action_bt_node
    # - nav2_remove_passed_goals_action_bt_node
    # - nav2_planner_selector_bt_node
    # - nav2_controller_selector_bt_node
    # - nav2_goal_checker_selector_bt_node
    # - nav2_controller_cancel_bt_node
    # - nav2_path_longer_on_approach_bt_node
    # - nav2_wait_cancel_bt_node
    # - nav2_spin_cancel_bt_node
    # - nav2_back_up_cancel_bt_node
    # - nav2_assisted_teleop_cancel_bt_node
    # - nav2_drive_on_heading_cancel_bt_node
    # - nav2_is_battery_charging_condition_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True

amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_link"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 25.0 # 25 meters for indoor is the max for RPlidar A3, put -1 as default value and it will take the max value available
    laser_min_range: 0.2 # 0.2 meters is the min for RPlidar A3, -1 as default value and it will take the min value available
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05 # not used in likelihood mode
    z_rand: 0.5
    z_short: 0.05 # not used in likelihood mode
    scan_topic: /namespace/scan
    map_topic: /namespace/map
    set_initial_pose: true # this should be set to false in real world scenario. 
    always_reset_initial_pose: false
    first_map_only: false
    initial_pose:
      x: 0.0
      y: 0.0
      z: 0.0
      yaw: 3.14 # should be 3.14 for simulation

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: "navigation_map" # full path to yaml filename
    topic_name: /namespace/map
    frame_id: map

behavior_server:
  ros__parameters:
    local_costmap_topic: /namespace/local_costmap/costmap_raw
    local_footprint_topic: /namespace/local_costmap/published_footprint
    global_costmap_topic: /namespace/global_costmap/costmap_raw
    global_footprint_topic: /namespace/global_costmap/published_footprint
    cycle_frequency: 10.0
    # behavior_plugins: ["spin", "backup", "drive_on_heading", "wait", "assisted_teleop"]
    behavior_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    # drive_on_heading:
    #   plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    # assisted_teleop:
    #   plugin: "nav2_behaviors/AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_link
    transform_timeout: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2
    use_sim_time: True

smoother_server:
  ros__parameters:
    use_sim_time: True
    costmap_topic: /namespace/global_costmap/costmap_raw
    footprint_topic: /namespace/global_costmap/published_footprint
    robot_base_frame: base_link
    transform_timeout: 0.1
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      do_refinement: True
